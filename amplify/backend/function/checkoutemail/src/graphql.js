import crypto from "@aws-crypto/sha256-js";
import { defaultProvider } from "@aws-sdk/credential-provider-node";
import { SignatureV4 } from "@aws-sdk/signature-v4";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { default as fetch, Request } from "node-fetch";

const GRAPHQL_ENDPOINT = process.env.API_ZIPZAP_GRAPHQLAPIENDPOINTOUTPUT;

const { Sha256 } = crypto;
const AWS_REGION = process.env.AWS_REGION || "us-west-2";

// Takes an array of getRecipient Queries
// generated by the recipientGet function to batch.
const recipientsQuery = (recipients) => /* GraphQL */ `
  query GetRecipients {
    ${recipients.join("\n\n")}
  }
`;

const recipientGet = (index, id) => /* GraphQL */ `
r${index}: getRecipient(id: "${id}") {
    id
    firstName
    lastName
    birthday
    startDate
  }
`;

export const getRecipients = async (recipientIDs) => {
  const queries = recipientIDs.map((id, i) => recipientGet(i, id));
  const query = recipientsQuery(queries);

  const endpoint = new URL(GRAPHQL_ENDPOINT);

  const signer = new SignatureV4({
    credentials: defaultProvider(),
    region: AWS_REGION,
    service: "appsync",
    sha256: Sha256,
  });

  const requestToBeSigned = new HttpRequest({
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      host: endpoint.host,
    },
    hostname: endpoint.host,
    body: JSON.stringify({ query }),
    path: endpoint.pathname,
  });

  const signed = await signer.sign(requestToBeSigned);
  const request = new Request(endpoint, signed);

  const response = await fetch(request);
  const body = await response.json();
  return body;
};
