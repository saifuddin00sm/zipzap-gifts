import crypto from "@aws-crypto/sha256-js";
import { defaultProvider } from "@aws-sdk/credential-provider-node";
import { SignatureV4 } from "@aws-sdk/signature-v4";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { default as fetch, Request } from "node-fetch";

const GRAPHQL_ENDPOINT = process.env.API_ZIPZAP_GRAPHQLAPIENDPOINTOUTPUT;

const { Sha256 } = crypto;
const AWS_REGION = process.env.AWS_REGION || "us-west-2";

const giftQuery = /* GraphQL */ `
  query GetGift($id: ID!) {
    getGift(id: $id) {
      name
    }
  }
`;

// Takes an array of getRecipient Queries
// generated by the recipientGet function to batch.
const recipientsQuery = (recipients) => /* GraphQL */ `
  query GetRecipients {
    ${recipients.join("\n\n")}
  }
`;

const recipientGet = (index, id) => /* GraphQL */ `
r${index}: getRecipient(id: "${id}") {
    id
    firstName
    lastName
    birthday
    startDate
  }
`;

const graphQLQuery = async (query, variables) => {
  const endpoint = new URL(GRAPHQL_ENDPOINT);
  const body = { query };
  if (variables) {
    body.variables = variables;
  }

  const signer = new SignatureV4({
    credentials: defaultProvider(),
    region: AWS_REGION,
    service: "appsync",
    sha256: Sha256,
  });

  const requestToBeSigned = new HttpRequest({
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      host: endpoint.host,
    },
    hostname: endpoint.host,
    body: JSON.stringify(body),
    path: endpoint.pathname,
  });

  const signed = await signer.sign(requestToBeSigned);
  const request = new Request(endpoint, signed);

  const response = await fetch(request);
  const { data = {} } = await response.json();
  return data;
};

export const getGiftName = async (id) => {
  const { getGift: { name } = {} } = await graphQLQuery(giftQuery, { id });
  return name;
};

export const getRecipients = async (recipientIDs) => {
  const queries = recipientIDs.map((id, i) => recipientGet(i, id));
  const query = recipientsQuery(queries);

  const data = await graphQLQuery(query);

  return Object.values(data).map((user) => {
    if (!user) {
      return { id: "X", name: "User Deleted" };
    }
    const { id, firstName, lastName, birthday, startDate } = user;
    return {
      id,
      name: `${firstName} ${lastName}`,
      birthday,
      startDate,
    };
  });
};
